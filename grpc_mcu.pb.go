//*
// Standalone signaling server for the Nextcloud Spreed app.
// Copyright (C) 2022 struktur AG
//
// @author Joachim Bauch <bauch@struktur.de>
//
// @license GNU AGPL version 3 or any later version
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_mcu.proto

package signaling

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPublisherIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	StreamType    string                 `protobuf:"bytes,2,opt,name=streamType,proto3" json:"streamType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublisherIdRequest) Reset() {
	*x = GetPublisherIdRequest{}
	mi := &file_grpc_mcu_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublisherIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublisherIdRequest) ProtoMessage() {}

func (x *GetPublisherIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_mcu_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublisherIdRequest.ProtoReflect.Descriptor instead.
func (*GetPublisherIdRequest) Descriptor() ([]byte, []int) {
	return file_grpc_mcu_proto_rawDescGZIP(), []int{0}
}

func (x *GetPublisherIdRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetPublisherIdRequest) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

type GetPublisherIdReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublisherId    string                 `protobuf:"bytes,1,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
	ProxyUrl       string                 `protobuf:"bytes,2,opt,name=proxyUrl,proto3" json:"proxyUrl,omitempty"`
	Ip             string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	ConnectToken   string                 `protobuf:"bytes,4,opt,name=connectToken,proto3" json:"connectToken,omitempty"`
	PublisherToken string                 `protobuf:"bytes,5,opt,name=publisherToken,proto3" json:"publisherToken,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetPublisherIdReply) Reset() {
	*x = GetPublisherIdReply{}
	mi := &file_grpc_mcu_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublisherIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublisherIdReply) ProtoMessage() {}

func (x *GetPublisherIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_mcu_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublisherIdReply.ProtoReflect.Descriptor instead.
func (*GetPublisherIdReply) Descriptor() ([]byte, []int) {
	return file_grpc_mcu_proto_rawDescGZIP(), []int{1}
}

func (x *GetPublisherIdReply) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

func (x *GetPublisherIdReply) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *GetPublisherIdReply) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetPublisherIdReply) GetConnectToken() string {
	if x != nil {
		return x.ConnectToken
	}
	return ""
}

func (x *GetPublisherIdReply) GetPublisherToken() string {
	if x != nil {
		return x.PublisherToken
	}
	return ""
}

var File_grpc_mcu_proto protoreflect.FileDescriptor

const file_grpc_mcu_proto_rawDesc = "" +
	"\n" +
	"\x0egrpc_mcu.proto\x12\tsignaling\"U\n" +
	"\x15GetPublisherIdRequest\x12\x1c\n" +
	"\tsessionId\x18\x01 \x01(\tR\tsessionId\x12\x1e\n" +
	"\n" +
	"streamType\x18\x02 \x01(\tR\n" +
	"streamType\"\xaf\x01\n" +
	"\x13GetPublisherIdReply\x12 \n" +
	"\vpublisherId\x18\x01 \x01(\tR\vpublisherId\x12\x1a\n" +
	"\bproxyUrl\x18\x02 \x01(\tR\bproxyUrl\x12\x0e\n" +
	"\x02ip\x18\x03 \x01(\tR\x02ip\x12\"\n" +
	"\fconnectToken\x18\x04 \x01(\tR\fconnectToken\x12&\n" +
	"\x0epublisherToken\x18\x05 \x01(\tR\x0epublisherToken2^\n" +
	"\x06RpcMcu\x12T\n" +
	"\x0eGetPublisherId\x12 .signaling.GetPublisherIdRequest\x1a\x1e.signaling.GetPublisherIdReply\"\x00B<Z:github.com/strukturag/nextcloud-spreed-signaling;signalingb\x06proto3"

var (
	file_grpc_mcu_proto_rawDescOnce sync.Once
	file_grpc_mcu_proto_rawDescData []byte
)

func file_grpc_mcu_proto_rawDescGZIP() []byte {
	file_grpc_mcu_proto_rawDescOnce.Do(func() {
		file_grpc_mcu_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpc_mcu_proto_rawDesc), len(file_grpc_mcu_proto_rawDesc)))
	})
	return file_grpc_mcu_proto_rawDescData
}

var file_grpc_mcu_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_grpc_mcu_proto_goTypes = []any{
	(*GetPublisherIdRequest)(nil), // 0: signaling.GetPublisherIdRequest
	(*GetPublisherIdReply)(nil),   // 1: signaling.GetPublisherIdReply
}
var file_grpc_mcu_proto_depIdxs = []int32{
	0, // 0: signaling.RpcMcu.GetPublisherId:input_type -> signaling.GetPublisherIdRequest
	1, // 1: signaling.RpcMcu.GetPublisherId:output_type -> signaling.GetPublisherIdReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_mcu_proto_init() }
func file_grpc_mcu_proto_init() {
	if File_grpc_mcu_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpc_mcu_proto_rawDesc), len(file_grpc_mcu_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_mcu_proto_goTypes,
		DependencyIndexes: file_grpc_mcu_proto_depIdxs,
		MessageInfos:      file_grpc_mcu_proto_msgTypes,
	}.Build()
	File_grpc_mcu_proto = out.File
	file_grpc_mcu_proto_goTypes = nil
	file_grpc_mcu_proto_depIdxs = nil
}
